#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClientSecure.h>  //Secure Client for HTTPS
#include <ArduinoJson.h>  //Use JSON parsing

// WiFi Credentials
const char* ssid = "YourSSID";
const char* password = "yourPASSWORD";

// CoinGecko API (Multiple Cryptos)
const char* apiUrl = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,cardano,dogecoin,solana,ripple&vs_currencies=usd";

// Secure WiFi Client
WiFiClientSecure wifiClient;

// LCD 1602 I2C Setup (Default I2C Address: 0x27)
LiquidCrystal_I2C lcd(0x27, 16, 2);

void setup() {
    Serial.begin(115200);
    WiFi.begin(ssid, password);
    Wire.begin(D2, D1);
    // Initialize LCD
    lcd.begin(16, 2);
    lcd.backlight();
    lcd.setCursor(0, 0);
    lcd.print("Connecting WiFi...");

    // Wait for WiFi Connection
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }

    Serial.println("\nWiFi Connected!");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("WiFi Connected!");

    wifiClient.setInsecure();  // Ignore SSL Certificate (Required for ESP8266)
}

void loop() {
    if (WiFi.status() == WL_CONNECTED) {
        HTTPClient http;
        Serial.print("Requesting: ");
        Serial.println(apiUrl);

        http.begin(wifiClient, apiUrl);  //Use Secure Connection
        http.addHeader("User-Agent", "ESP8266");

        int httpCode = http.GET();
        Serial.print("HTTP Response Code: ");
        Serial.println(httpCode);

        if (httpCode == HTTP_CODE_OK) {
            String payload = http.getString();
            Serial.println("Response:");
            Serial.println(payload);

            // Extract Prices
            String btcPrice = extractPrice(payload, "bitcoin");
            String ethPrice = extractPrice(payload, "ethereum");
            String adaPrice = extractPrice(payload, "cardano");
            String dogePrice = extractPrice(payload, "dogecoin");
            String solPrice = extractPrice(payload, "solana");
            String xrpPrice = extractPrice(payload, "ripple");

            // Display Prices on LCD
            displayCrypto("BTC", btcPrice, "ETH", ethPrice);
            displayCrypto("ADA", adaPrice, "DOGE", dogePrice);
            displayCrypto("SOL", solPrice, "XRP", xrpPrice);
        } else {
            Serial.print("HTTP Request failed, error: ");
            Serial.println(http.errorToString(httpCode));

            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("HTTP Error:");
            lcd.setCursor(0, 1);
            lcd.print(http.errorToString(httpCode));
        }
        http.end();
    } else {
        Serial.println("WiFi Disconnected!");
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("WiFi Lost!");
    }

    delay(60000);  // Update every 60 sec
}

// Function to Extract Crypto Price
String extractPrice(String payload, String crypto) {
    DynamicJsonDocument doc(1024);
    deserializeJson(doc, payload);

    if (doc[crypto]["usd"]) {
        return String(doc[crypto]["usd"]);
    }
    return "N/A";
}

// Function to Display Two Cryptos on LCD
void displayCrypto(String crypto1, String price1, String crypto2, String price2) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(crypto1 + ": $" + price1);
    lcd.setCursor(0, 1);
    lcd.print(crypto2 + ": $" + price2);
    delay(4000);  // Show for 4 sec
}
